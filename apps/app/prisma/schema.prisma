datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
  extensions = [vector]
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

model Profile {
  id         String   @id @default(cuid())
  email      String   @unique
  full_name  String?
  avatar_url String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  messages           Message[]
  chat_participants ChatParticipant[]
  created_chats     Chat[]          @relation("CreatedBy")

  @@map("profiles")
}

model Chat {
  id         String   @id @default(cuid())
  title      String?
  type       String   @default("personal") // personal, direct, group
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  created_by String
  pinned     Boolean  @default(false)
  is_archived Boolean @default(false)
  labels     String[] @default([])

  // Relations
  creator           Profile           @relation("CreatedBy", fields: [created_by], references: [id])
  chat_participants ChatParticipant[]
  messages          Message[]

  @@map("chats")
}

model ChatParticipant {
  id           String   @id @default(cuid())
  chat_id      String
  user_id      String
  joined_at    DateTime @default(now())
  last_read_at DateTime @default(now())

  // Relations
  chat    Chat    @relation(fields: [chat_id], references: [id], onDelete: Cascade)
  profile Profile @relation(fields: [user_id], references: [id])

  @@unique([chat_id, user_id])
  @@map("chat_participants")
}

model Message {
  id         String                 @id @default(cuid())
  chat_id    String
  content    String
  sender_id  String
  created_at DateTime               @default(now())
  embedding  Unsupported("vector")?
  references Json?

  // Relations
  chat   Chat    @relation(fields: [chat_id], references: [id], onDelete: Cascade)
  sender Profile @relation(fields: [sender_id], references: [id])

  @@map("messages")
} 