import { drizzle } from 'drizzle-orm/node-postgres';
import { migrate } from 'drizzle-orm/node-postgres/migrator';
import { Pool } from 'pg';
import * as schema from './schema';

/**
 * Test database configuration
 */
export class TestDatabase {
  private pool!: Pool;
  private db!: ReturnType<typeof drizzle>;
  private dbName: string;

  constructor() {
    this.dbName = `test_${Date.now()}_${Math.random().toString(36).substring(7)}`;
  }

  /**
   * Initialize test database
   */
  async setup() {
    // Connect to default postgres database to create test database
    const setupPool = new Pool({
      host: process.env.TEST_DB_HOST || 'localhost',
      port: Number.parseInt(process.env.TEST_DB_PORT || '5432'),
      user: process.env.TEST_DB_USER || 'testuser',
      password: process.env.TEST_DB_PASSWORD || 'testpass',
      database: 'postgres',
    });

    try {
      // Create test database
      await setupPool.query(`CREATE DATABASE ${this.dbName}`);
    } finally {
      await setupPool.end();
    }

    // Connect to test database
    this.pool = new Pool({
      host: process.env.TEST_DB_HOST || 'localhost',
      port: Number.parseInt(process.env.TEST_DB_PORT || '5432'),
      user: process.env.TEST_DB_USER || 'testuser',
      password: process.env.TEST_DB_PASSWORD || 'testpass',
      database: this.dbName,
    });

    this.db = drizzle(this.pool, { schema });

    // Run migrations
    await migrate(this.db, {
      migrationsFolder: './drizzle',
    });

    return this.db;
  }

  /**
   * Clean up test database
   */
  async teardown() {
    if (this.pool) {
      await this.pool.end();
    }

    // Connect to default database to drop test database
    const teardownPool = new Pool({
      host: process.env.TEST_DB_HOST || 'localhost',
      port: Number.parseInt(process.env.TEST_DB_PORT || '5432'),
      user: process.env.TEST_DB_USER || 'testuser',
      password: process.env.TEST_DB_PASSWORD || 'testpass',
      database: 'postgres',
    });

    try {
      await teardownPool.query(`DROP DATABASE IF EXISTS ${this.dbName}`);
    } catch (_error) {
    } finally {
      await teardownPool.end();
    }
  }

  /**
   * Clear all tables (useful between tests)
   */
  async clear() {
    const tables = [
      'board_assets',
      'board_collaborators',
      'comments',
      'assets',
      'boards',
      'users',
    ];

    for (const table of tables) {
      await this.db.execute(`TRUNCATE TABLE ${table} CASCADE`);
    }
  }

  /**
   * Seed test data
   */
  async seed() {
    // Create test users
    const users = await this.db
      .insert(schema.users)
      .values([
        {
          id: 'test-user-1',
          clerkId: 'clerk_test_1',
          username: 'testuser1',
          email: 'test1@example.com',
          name: 'Test User 1',
        },
        {
          id: 'test-user-2',
          clerkId: 'clerk_test_2',
          username: 'testuser2',
          email: 'test2@example.com',
          name: 'Test User 2',
        },
      ])
      .returning();

    // Create test boards
    const boards = await this.db
      .insert(schema.boards)
      .values([
        {
          id: 'test-board-1',
          name: 'Test Board 1',
          description: 'First test board',
          creatorId: users[0].id,
          visibility: 'public',
        },
        {
          id: 'test-board-2',
          name: 'Test Board 2',
          description: 'Second test board',
          creatorId: users[1].id,
          visibility: 'private',
        },
      ])
      .returning();

    // Create test assets
    const assets = await this.db
      .insert(schema.assets)
      .values([
        {
          id: 'test-asset-1',
          name: 'test-image.jpg',
          url: 'https://example.com/test-image.jpg',
          type: 'image',
          creatorId: users[0].id,
        },
        {
          id: 'test-asset-2',
          name: 'test-video.mp4',
          url: 'https://example.com/test-video.mp4',
          type: 'video',
          creatorId: users[1].id,
        },
      ])
      .returning();

    return { users, boards, assets };
  }

  /**
   * Get database instance
   */
  getDb() {
    return this.db;
  }

  /**
   * Execute raw SQL
   */
  async execute(sql: string) {
    return this.db.execute(sql);
  }
}

/**
 * Helper for integration tests
 */
export function setupTestDatabase() {
  const testDb = new TestDatabase();

  beforeAll(async () => {
    await testDb.setup();
  });

  afterAll(async () => {
    await testDb.teardown();
  });

  beforeEach(async () => {
    await testDb.clear();
    await testDb.seed();
  });

  return testDb;
}
